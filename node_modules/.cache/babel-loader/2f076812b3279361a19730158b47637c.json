{"ast":null,"code":"var _jsxFileName = \"/home/berkc/Downloads/BasicTaskManagement-master/task-management/src/pages/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CreateTaskForm from \"../components/organism/CreateTaskForm\";\nimport UpdateTaskForm from \"../components/organism/UpdateTaskForm\";\nimport AtomButton from \"../components/atoms/AtomButton\";\nimport AtomTable from \"../components/atoms/AtomTable\";\nimport TaskService from \"../services/TaskService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MainPage() {\n  _s();\n\n  const [isShown, setIsShown] = useState(false);\n  const [isCreate, setIsCreate] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false);\n  const [state, setState] = useState({\n    selected: []\n  });\n  const taskService = new TaskService();\n\n  const togglePopupUpdate = () => {\n    setIsUpdate(update => !update);\n  };\n\n  const deleteTaskFromTable = () => {\n    var _state$selected;\n\n    if ((state === null || state === void 0 ? void 0 : (_state$selected = state.selected) === null || _state$selected === void 0 ? void 0 : _state$selected.length) > 0) {\n      console.log(state.selected, \" are deleted\");\n      taskService.deleteTask(state.selected);\n      handleOnSelect([], false);\n      handleOnSelectAll(false, []);\n    } else {\n      alert(\"There is no selected task to delete\");\n    }\n  };\n\n  const updateTable = row => {\n    if (state.selected.length === 1) {\n      togglePopupUpdate();\n    } else {\n      alert(\"Please select only one task to update\");\n    }\n  };\n\n  let handleOnSelect = (row, isSelect) => {\n    if (isSelect) {\n      setState(() => ({\n        selected: [...state.selected, row.id]\n      }));\n      console.log(\"selected:\", state.selected);\n    } else {\n      setState(() => ({\n        selected: state.selected.filter(x => x !== row.id)\n      }));\n    }\n  };\n\n  let handleOnSelectAll = (isSelect, rows) => {\n    const ids = rows.map(r => r.id);\n\n    if (isSelect) {\n      setState(() => ({\n        selected: ids\n      }));\n    } else {\n      setState(() => ({\n        selected: []\n      }));\n    }\n  };\n\n  const selectRow = {\n    mode: \"checkbox\",\n    clickToSelect: true,\n    selected: state.selected,\n    style: {\n      backgroundColor: '#D3D3D3'\n    },\n    onSelect: handleOnSelect,\n    onSelectAll: handleOnSelectAll\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(AtomButton, {\n          className: \"btn\",\n          text: \"Show Tasks\",\n          onClick: () => setIsShown(cur => !cur)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(AtomButton, {\n          className: \"btn\",\n          text: \"Create Task\",\n          onClick: () => setIsCreate(!isCreate)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(AtomButton, {\n          className: \"btn\",\n          text: \"Update Tasks\",\n          onClick: updateTable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(AtomButton, {\n          className: \"btn\",\n          text: \"Delete Tasks\",\n          onClick: deleteTaskFromTable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this), isUpdate && /*#__PURE__*/_jsxDEV(UpdateTaskForm, {\n        dataId: state.selected[0],\n        handleClose: togglePopupUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }, this), isShown && /*#__PURE__*/_jsxDEV(AtomTable, {\n        selectRow: selectRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 37\n      }, this), isCreate && /*#__PURE__*/_jsxDEV(CreateTaskForm, {\n        handleClose: () => setIsCreate(!isCreate)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainPage, \"TGeid6KjZMoJkhXIJIelS5uaiFk=\");\n\n_c = MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","CreateTaskForm","UpdateTaskForm","AtomButton","AtomTable","TaskService","MainPage","isShown","setIsShown","isCreate","setIsCreate","isUpdate","setIsUpdate","state","setState","selected","taskService","togglePopupUpdate","update","deleteTaskFromTable","length","console","log","deleteTask","handleOnSelect","handleOnSelectAll","alert","updateTable","row","isSelect","id","filter","x","rows","ids","map","r","selectRow","mode","clickToSelect","style","backgroundColor","onSelect","onSelectAll","cur"],"sources":["/home/berkc/Downloads/BasicTaskManagement-master/task-management/src/pages/MainPage.js"],"sourcesContent":["\nimport React, {useState} from \"react\";\nimport CreateTaskForm from \"../components/organism/CreateTaskForm\";\nimport UpdateTaskForm from \"../components/organism/UpdateTaskForm\";\nimport AtomButton from \"../components/atoms/AtomButton\";\nimport AtomTable from \"../components/atoms/AtomTable\";\nimport TaskService from \"../services/TaskService\";\n\n\nexport default function MainPage(){\n  \n    const [isShown , setIsShown] = useState(false);\n    const [isCreate , setIsCreate] = useState(false);\n    const [isUpdate , setIsUpdate] = useState(false);\n    \n    const [state , setState] = useState({\n        selected : []\n    })\n    \n    const taskService = new TaskService();\n\n    \n    \n    const togglePopupUpdate = () => {\n        setIsUpdate( update => !update);\n    }\n\n\n    const deleteTaskFromTable = () => {\n        if(state?.selected?.length >0){\n            console.log(state.selected,\" are deleted\");\n            taskService.deleteTask( state.selected );\n            handleOnSelect([] , false)\n            handleOnSelectAll(false , [])\n        }\n        else{\n            alert(\"There is no selected task to delete\");\n        }\n    }\n\n    \n    const updateTable = (row) => {\n        \n        if(state.selected.length === 1){\n            togglePopupUpdate();\n\n        }\n        else{\n            alert(\"Please select only one task to update\");\n        }\n    }\n\n    let handleOnSelect = (row, isSelect) => {\n        if (isSelect) {\n          setState(() => ({\n            selected: [...state.selected, row.id]\n          }));\n          console.log(\"selected:\", state.selected);\n        } else {\n          setState(() => ({\n            selected: state.selected.filter(x => x !== row.id)\n          }));\n        }\n      }\n      \n    let  handleOnSelectAll = (isSelect, rows) => {\n        const ids = rows.map(r => r.id);\n        if (isSelect) {\n          setState(() => ({\n            selected: ids\n          }));\n        } else {\n          setState(() => ({\n            selected: []\n          }));\n        }\n      }\n    const selectRow = {\n        mode : \"checkbox\",\n        clickToSelect : true ,\n        selected: state.selected,\n        style: { backgroundColor: '#D3D3D3' },\n        onSelect: handleOnSelect,\n        onSelectAll: handleOnSelectAll\n\n    }\n    return (\n        <div >\n            {\n                    <header >\n                \n                        <p>\n                            <AtomButton \n                                className=\"btn\" \n                                text ={\"Show Tasks\"}\n                                onClick = {() =>  setIsShown(cur => !cur)}/>\n                            \n                            <AtomButton \n                                className=\"btn\"\n                                text = \"Create Task\" \n                                onClick={() => setIsCreate(!isCreate)}/>  \n                            \n                            <AtomButton \n                                 className=\"btn\"  \n                                 text =\"Update Tasks\" \n                                 onClick = {updateTable }/>\n\n                            <AtomButton \n                                 className=\"btn\"  \n                                 text =\"Delete Tasks\" \n                                 onClick = {deleteTaskFromTable}/>\n                            \n                        </p>\n                        \n                            { isUpdate && (\n                                        <UpdateTaskForm\n                                            dataId = {state.selected[0]}\n                                            handleClose = {togglePopupUpdate}/>\n                                )\n                            }\n\n                            <br></br>\n                            \n                            { isShown && (\n                                    <AtomTable \n                                        selectRow = {selectRow}/>\n                            )}\n            \n                            { isCreate && (            \n                                    <CreateTaskForm\n                                        handleClose = {() => setIsCreate(!isCreate)}/>\n                                \n                            )}\n                        \n                    </header>\n                     \n            } \n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}