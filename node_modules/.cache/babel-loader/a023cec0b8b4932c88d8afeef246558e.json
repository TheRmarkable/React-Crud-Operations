{"ast":null,"code":"import { tasks } from \"../components/constant/tasks\";\nimport { validateInputs } from \"../components/utilities/validation\";\n/**\n * @class TaskService\n */\n\nexport default class TaskService {\n  /**\n   * @function createTask - This function creates a new task row and appends to Task Table\n   * @param {Object} taskObject - This is a task object that will be appended in Task Table\n   * @return {Object}  - This function returns created task itself \n   * @throw  {Error} \n   * @async\n   */\n  async createTask(taskObject) {\n    if (Object.values(taskObject).every(x => x) && !validateInputs(taskObject)) {\n      tasks.push(taskObject);\n      return taskObject;\n    } else {\n      throw new Error(\"Invalid Properties\");\n    }\n  }\n  /**\n   * @function updateTask - This function updates existing task's value or values\n   * @param {Object} taskObject - This is a task in Task Table that will be updated with incoming object \n   * @param {Object} newObjectVal - This is new task value of existing task in Task Table that will be replaced with old value\n   * @async\n   */\n\n\n  async updateTask(taskObject, newObjectVal) {\n    if (Object.values(taskObject).every(x => x)) {\n      tasks.forEach(task => {\n        if (task.id === newObjectVal.id) {\n          task.project_name = newObjectVal.project_name;\n          task.task_name = newObjectVal.task_name;\n          tasks.status = newObjectVal.status;\n        }\n\n        console.log(\"tasks UPDATE:\", tasks);\n      });\n    }\n  }\n  /**\n   * @function deleteTask - This function removes task or tasks from table\n   * @param {Array} tasksArray - This array contains ids that will be removed from table\n   * @async \n   */\n\n\n  async deleteTask(tasksArray) {\n    if (tasksArray && tasksArray.length > 0) {\n      let ids;\n      let indexOfDelete;\n      tasksArray.forEach(taskId => {\n        ids = tasks.map(task => task.id);\n        indexOfDelete = ids.indexOf(taskId);\n        tasks.splice(indexOfDelete, 1);\n      });\n    } else {\n      alert(\"There is not selected tasks to delete\");\n    }\n  }\n  /**\n   * @function checkById - This function controls that task id exists or not.\n   * @param {Number} taskId - This is an id of task  \n   * @returns {Boolean} - This task id exists or not\n   * @async\n   */\n\n\n  async checkById(taskId) {\n    try {\n      let parsedTaskId = parseInt(taskId);\n\n      if (!parsedTaskId) {\n        let value = tasks.find(task => task.id === taskId);\n        console.log(\"value: \", value);\n        return value;\n      }\n    } catch (error) {\n      console.log(\"Error in TaskService.checkById() :\", error);\n    }\n  }\n  /**\n  * @function byId - This function returns task that has taskId which is specified in parameter.\n  * @param {Number} taskId - This is an id of task  \n  * @returns {Object} - Task Object\n  * @async\n  */\n\n\n  async byId(taskId) {\n    let task = tasks.find(task => task.id === taskId);\n    console.log(\"task in byid\", task);\n    return task;\n  }\n\n}","map":{"version":3,"names":["tasks","validateInputs","TaskService","createTask","taskObject","Object","values","every","x","push","Error","updateTask","newObjectVal","forEach","task","id","project_name","task_name","status","console","log","deleteTask","tasksArray","length","ids","indexOfDelete","taskId","map","indexOf","splice","alert","checkById","parsedTaskId","parseInt","value","find","error","byId"],"sources":["/home/berkc/Downloads/BasicTaskManagement-master/task-management/src/services/TaskService.js"],"sourcesContent":["import { tasks } from \"../components/constant/tasks\";\nimport { validateInputs } from \"../components/utilities/validation\";\n\n/**\n * @class TaskService\n */\nexport default class TaskService{\n    \n/**\n * @function createTask - This function creates a new task row and appends to Task Table\n * @param {Object} taskObject - This is a task object that will be appended in Task Table\n * @return {Object}  - This function returns created task itself \n * @throw  {Error} \n * @async\n */\n    async createTask(taskObject){\n        \n        if( Object.values(taskObject).every ( x => x) && !validateInputs( taskObject ) ){\n             tasks.push(taskObject);\n                return taskObject;\n        }\n        else {\n            throw new Error(\"Invalid Properties\");\n        }\n    }\n\n/**\n * @function updateTask - This function updates existing task's value or values\n * @param {Object} taskObject - This is a task in Task Table that will be updated with incoming object \n * @param {Object} newObjectVal - This is new task value of existing task in Task Table that will be replaced with old value\n * @async\n */\n    async updateTask(taskObject , newObjectVal){\n        if( Object.values(taskObject).every ( x => x) ){\n\n            tasks.forEach( task => {\n                \n                if(task.id === newObjectVal.id) {\n                    task.project_name = newObjectVal.project_name;\n                    task.task_name = newObjectVal.task_name;\n                    tasks.status = newObjectVal.status\n                }\n                console.log(\"tasks UPDATE:\",tasks)\n            })\n\n        }       \n    }\n/**\n * @function deleteTask - This function removes task or tasks from table\n * @param {Array} tasksArray - This array contains ids that will be removed from table\n * @async \n */\n    async deleteTask( tasksArray ){\n        if(tasksArray && tasksArray.length > 0){\n\n            let ids ;\n            let indexOfDelete; \n            \n            tasksArray.forEach( taskId => {\n                ids = tasks.map( task => task.id);\n                indexOfDelete = ids.indexOf(taskId);\n                tasks.splice(indexOfDelete , 1)\n            })\n            \n        }   \n        else{\n            alert(\"There is not selected tasks to delete\")\n        }\n    }\n\n/**\n * @function checkById - This function controls that task id exists or not.\n * @param {Number} taskId - This is an id of task  \n * @returns {Boolean} - This task id exists or not\n * @async\n */\n    async checkById(taskId){\n        try{\n            let parsedTaskId = parseInt(taskId );\n            if(!parsedTaskId){\n                let value = tasks.find( task => task.id === taskId)\n                console.log(\"value: \",value)\n                return value;\n            }\n        }\n        catch(error){\n            console.log(\"Error in TaskService.checkById() :\",error);\n        }\n        \n\n    }\n\n    /**\n * @function byId - This function returns task that has taskId which is specified in parameter.\n * @param {Number} taskId - This is an id of task  \n * @returns {Object} - Task Object\n * @async\n */\n     async byId(taskId){\n        let task = tasks.find( task => task.id === taskId)\n        console.log(\"task in byid\",task);\n        \n        return task ;\n        \n    }\n}"],"mappings":"AAAA,SAASA,KAAT,QAAsB,8BAAtB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,CAAiB;EAEhC;AACA;AACA;AACA;AACA;AACA;AACA;EACoB,MAAVC,UAAU,CAACC,UAAD,EAAY;IAExB,IAAIC,MAAM,CAACC,MAAP,CAAcF,UAAd,EAA0BG,KAA1B,CAAkCC,CAAC,IAAIA,CAAvC,KAA6C,CAACP,cAAc,CAAEG,UAAF,CAAhE,EAAgF;MAC3EJ,KAAK,CAACS,IAAN,CAAWL,UAAX;MACG,OAAOA,UAAP;IACP,CAHD,MAIK;MACD,MAAM,IAAIM,KAAJ,CAAU,oBAAV,CAAN;IACH;EACJ;EAEL;AACA;AACA;AACA;AACA;AACA;;;EACoB,MAAVC,UAAU,CAACP,UAAD,EAAcQ,YAAd,EAA2B;IACvC,IAAIP,MAAM,CAACC,MAAP,CAAcF,UAAd,EAA0BG,KAA1B,CAAkCC,CAAC,IAAIA,CAAvC,CAAJ,EAA+C;MAE3CR,KAAK,CAACa,OAAN,CAAeC,IAAI,IAAI;QAEnB,IAAGA,IAAI,CAACC,EAAL,KAAYH,YAAY,CAACG,EAA5B,EAAgC;UAC5BD,IAAI,CAACE,YAAL,GAAoBJ,YAAY,CAACI,YAAjC;UACAF,IAAI,CAACG,SAAL,GAAiBL,YAAY,CAACK,SAA9B;UACAjB,KAAK,CAACkB,MAAN,GAAeN,YAAY,CAACM,MAA5B;QACH;;QACDC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BpB,KAA5B;MACH,CARD;IAUH;EACJ;EACL;AACA;AACA;AACA;AACA;;;EACoB,MAAVqB,UAAU,CAAEC,UAAF,EAAc;IAC1B,IAAGA,UAAU,IAAIA,UAAU,CAACC,MAAX,GAAoB,CAArC,EAAuC;MAEnC,IAAIC,GAAJ;MACA,IAAIC,aAAJ;MAEAH,UAAU,CAACT,OAAX,CAAoBa,MAAM,IAAI;QAC1BF,GAAG,GAAGxB,KAAK,CAAC2B,GAAN,CAAWb,IAAI,IAAIA,IAAI,CAACC,EAAxB,CAAN;QACAU,aAAa,GAAGD,GAAG,CAACI,OAAJ,CAAYF,MAAZ,CAAhB;QACA1B,KAAK,CAAC6B,MAAN,CAAaJ,aAAb,EAA6B,CAA7B;MACH,CAJD;IAMH,CAXD,MAYI;MACAK,KAAK,CAAC,uCAAD,CAAL;IACH;EACJ;EAEL;AACA;AACA;AACA;AACA;AACA;;;EACmB,MAATC,SAAS,CAACL,MAAD,EAAQ;IACnB,IAAG;MACC,IAAIM,YAAY,GAAGC,QAAQ,CAACP,MAAD,CAA3B;;MACA,IAAG,CAACM,YAAJ,EAAiB;QACb,IAAIE,KAAK,GAAGlC,KAAK,CAACmC,IAAN,CAAYrB,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYW,MAAhC,CAAZ;QACAP,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBc,KAAtB;QACA,OAAOA,KAAP;MACH;IACJ,CAPD,CAQA,OAAME,KAAN,EAAY;MACRjB,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAiDgB,KAAjD;IACH;EAGJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACe,MAAJC,IAAI,CAACX,MAAD,EAAQ;IACf,IAAIZ,IAAI,GAAGd,KAAK,CAACmC,IAAN,CAAYrB,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYW,MAAhC,CAAX;IACAP,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BN,IAA3B;IAEA,OAAOA,IAAP;EAEH;;AAlG2B"},"metadata":{},"sourceType":"module"}